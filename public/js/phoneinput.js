/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/filament/forms/phoneinput/index.js":
/*!*********************************************************!*\
  !*** ./resources/js/filament/forms/phoneinput/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var intl_tel_input__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! intl-tel-input */ \"./node_modules/intl-tel-input/index.js\");\n/* harmony import */ var intl_tel_input__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(intl_tel_input__WEBPACK_IMPORTED_MODULE_0__);\n\nwindow.intlTelInput = (intl_tel_input__WEBPACK_IMPORTED_MODULE_0___default());\n/**\r\n * International Telephone Input\r\n */\n\nif (typeof window.intlTelInput !== 'function') {\n  throw new TypeError('Tel-Input: requires International Telephone Input (https://github.com/jackocnr/intl-tel-input). Please install with NPM or include the CDN.');\n} // // LaravelTelInput\n// (function() {\n//     'use strict';\n//     function setCookie(cookieName, cookieValue, expiryDays = null, path = null, domain = null) {\n//         let cookieString = `${cookieName}=${cookieValue};`\n//         if (expiryDays) {\n//             const d = new Date();\n//             d.setTime(d.getTime() + (expiryDays * 24 * 60 * 60 * 1000));\n//             cookieString += `expires=${d.toUTCString()};`\n//         }\n//         if (path) {\n//             cookieString += `path=${path};`\n//         }\n//         if (domain) {\n//             cookieString += `domain=${domain};`\n//         }\n//         document.cookie = cookieString;\n//     }\n//     function getCookie(cookieName) {\n//         let name = cookieName + \"=\";\n//         let ca = document.cookie.split(';');\n//         for (let i = 0; i < ca.length; i++) {\n//             let c = ca[i];\n//             while (c.charAt(0) == ' ') {\n//                 c = c.substring(1);\n//             }\n//             if (c.indexOf(name) == 0) {\n//                 return c.substring(name.length, c.length);\n//             }\n//         }\n//         return \"\";\n//     }\n//     function removeCookie(cookieName, path = null, domain = null) {\n//         let cookieString = `${cookieName}=;`\n//         const d = new Date();\n//         d.setTime(d.getTime() - (30 * 24 * 60 * 60 * 1000));\n//         cookieString += `expires=${d.toUTCString()};`\n//         if (path) {\n//             cookieString += `path=${path};`\n//         }\n//         if (domain) {\n//             cookieString += `domain=${domain};`\n//         }\n//         document.cookie = cookieString;\n//     }\n//     // init a tel input\n//     function initTelInput(telInput, options = {}) {\n//         // tel input country cookie\n//         const IntlTelInputSelectedCountryCookie = `IntlTelInputSelectedCountry_${telInput.dataset.phoneInputId}`;\n//         // allow each input to have its own initialCountry and geoIpLookup\n//         window.intlTelInputGlobals.autoCountry = getCookie(IntlTelInputSelectedCountryCookie) || window.intlTelInputGlobals.autoCountry;\n//         // window.intlTelInputGlobals.startedLoadingAutoCountry = false;\n//         // fix autofill bugs on page refresh in Firefox\n//         let form = telInput.closest('form');\n//         if (form) {\n//             form.setAttribute('autocomplete', 'off');\n//         }\n//         // geoIpLookup option\n//         if (options.geoIpLookup == null) {\n//             // unset it if null\n//             delete options.geoIpLookup;\n//         } else if (options.geoIpLookup === 'ipinfo') {\n//             options.geoIpLookup = function(success, failure) {\n//                 let country = getCookie(IntlTelInputSelectedCountryCookie);\n//                 if (country) {\n//                     success(country);\n//                 } else {\n//                     fetch('https://ipinfo.io/json')\n//                         .then(res => res.json())\n//                         .then(data => data)\n//                         .then((data) => {\n//                             let country = data.country ?.toUpperCase();\n//                             success(country);\n//                             setCookie(IntlTelInputSelectedCountryCookie, country);\n//                         })\n//                         .catch(error => success('US'));\n//                 }\n//             }\n//         } else if (typeof window[options.geoIpLookup] === 'function') {\n//             // user custom function\n//             options.geoIpLookup = window[options.geoIpLookup];\n//         } else {\n//             if (typeof options.geoIpLookup !== 'function') {\n//                 throw new TypeError(\n//                     `Laravel-Tel-Input: Undefined function '${options.geoIpLookup}' specified in tel-input.options.geoIpLookup.`\n//                 );\n//             }\n//             delete options.geoIpLookup; // unset if undefined function\n//         }\n//         // customPlaceholder option\n//         if (options.customPlaceholder == null) {\n//             // unset if its null\n//             delete options.customPlaceholder;\n//         } else if (typeof window[options.customPlaceholder] === 'function') {\n//             // user custom function\n//             options.customPlaceholder = window[options.customPlaceholder];\n//         } else {\n//             if (typeof options.customPlaceholder !== 'function') {\n//                 throw new TypeError(\n//                     `Laravel-Tel-Input: Undefined function '${options.customPlaceholder}' specified in tel-input.options.customPlaceholder.`\n//                 );\n//             }\n//             delete options.customPlaceholder; // unset if undefined function\n//         }\n//         // utilsScript option\n//         if (options.utilsScript) {\n//             // Fix utilsScript relative path bug\n//             options.utilsScript = options.utilsScript.charAt(0) == '/' ? options.utilsScript : '/' + options.utilsScript;\n//         }\n//         // init the tel input\n//         const itiPhone = window.intlTelInput(telInput, options);\n//         // countrychange event function\n//         const countryChangeEventFunc = function() {\n//             let countryData = itiPhone.getSelectedCountryData();\n//             if (countryData.iso2) {\n//                 setCookie(IntlTelInputSelectedCountryCookie, countryData.iso2?.toUpperCase());\n//                 // phone country input data\n//                 if (this.dataset.phoneCountryInput && countryData.iso2) {\n//                     const phoneCountryInput = document.querySelector(this.dataset.phoneCountryInput);\n//                     if (phoneCountryInput) {\n//                         let oldValue = phoneCountryInput.value?.trim();\n//                         phoneCountryInput.value = countryData.iso2?.toUpperCase();\n//                         if (phoneCountryInput.value !== oldValue || phoneCountryInput.value != '') {\n//                             phoneCountryInput.dispatchEvent(new KeyboardEvent('change'));\n//                         }\n//                     }\n//                 }\n//                 // phone dial code input data\n//                 if (this.dataset.phoneDialCodeInput && countryData.dialCode) {\n//                     const phoneDialCodeInput = document.querySelector(this.dataset.phoneDialCodeInput);\n//                     if (phoneDialCodeInput) {\n//                         let oldValue = phoneDialCodeInput.value;\n//                         phoneDialCodeInput.value = countryData.dialCode;\n//                         if (phoneDialCodeInput.value !== oldValue || phoneDialCodeInput.value != '') {\n//                             phoneDialCodeInput.dispatchEvent(new KeyboardEvent('change'));\n//                         }\n//                     }\n//                 }\n//                 // once country change trigger change event on the telephone input\n//                 telInput.dispatchEvent(new KeyboardEvent('change'));\n//             }\n//         }\n//         // countrychange event function\n//         const telInputChangeEventFunc = function() {\n//             // phone input data\n//             if (this.dataset.phoneInput) {\n//                 const phoneInput = document.querySelector(this.dataset.phoneInput);\n//                 if (phoneInput) {\n//                     let oldValue = phoneInput.value?.trim();\n//                     if (oldValue != '' && oldValue.charAt(0) != '+' && oldValue.charAt(0) != '0' && itiPhone.isValidNumber() === null) {\n//                         oldValue = `+${oldValue}`;\n//                         phoneInput.value = oldValue;\n//                     }\n//                     if (itiPhone.getNumber()?.trim() != '') {\n//                         if (itiPhone.isValidNumber()) {\n//                             phoneInput.value = itiPhone.getNumber();\n//                         } else {\n//                             phoneInput.value = '';\n//                         }\n//                     } else {\n//                         if (oldValue != '' && itiPhone.isValidNumber() === null) {\n//                             itiPhone.setNumber(oldValue);\n//                             phoneInput.value = itiPhone.getNumber();\n//                         }\n//                     }\n//                     if (phoneInput.value !== oldValue && phoneInput.value != '' && (itiPhone.isValidNumber() === true || itiPhone.isValidNumber() === null)) {\n//                         phoneInput.dispatchEvent(new KeyboardEvent('change'));\n//                         phoneInput.dispatchEvent(new CustomEvent('telchange', {\n//                             detail: {\n//                                 valid: true,\n//                                 validNumber: phoneInput.value,\n//                                 number: itiPhone.getNumber(),\n//                                 country: itiPhone.getSelectedCountryData().iso2?.toUpperCase(),\n//                                 countryName: itiPhone.getSelectedCountryData().name,\n//                                 dialCode: itiPhone.getSelectedCountryData().dialCode\n//                             }\n//                         }));\n//                     } else {\n//                         if (itiPhone.isValidNumber() === false) {\n//                             phoneInput.dispatchEvent(new KeyboardEvent('change'));\n//                             phoneInput.dispatchEvent(new CustomEvent('telchange', {\n//                                 detail: {\n//                                     valid: false,\n//                                     validNumber: phoneInput.value,\n//                                     number: itiPhone.getNumber(),\n//                                     country: itiPhone.getSelectedCountryData().iso2?.toUpperCase(),\n//                                     countryName: itiPhone.getSelectedCountryData().name,\n//                                     dialCode: itiPhone.getSelectedCountryData().dialCode\n//                                 }\n//                             }));\n//                         }\n//                     }\n//                 }\n//             }\n//         }\n//         // Listen the tel inputs events\n//         telInput.addEventListener('countrychange', countryChangeEventFunc);\n//         telInput.addEventListener('change', telInputChangeEventFunc);\n//         // listen and sync phone number with tel input if any\n//         if (telInput.dataset.phoneInput) {\n//             const phoneInput = document.querySelector(telInput.dataset.phoneInput);\n//             if (phoneInput) {\n//                 let oldValue = phoneInput.value?.trim();\n//                 if (oldValue != '' && oldValue.charAt(0) != '+' && oldValue.charAt(0) != '0') {\n//                     oldValue = `+${oldValue}`;\n//                 }\n//                 phoneInput.addEventListener('change', function() {\n//                     let newValue = this.value?.trim();\n//                     if (newValue != oldValue && newValue != '') {\n//                         itiPhone.setNumber(newValue);\n//                     }\n//                 });\n//             }\n//         }\n//         // listen and sync phone country with tel input if any\n//         if (telInput.dataset.phoneCountryInput) {\n//             const phoneCountryInput = document.querySelector(telInput.dataset.phoneCountryInput);\n//             if (phoneCountryInput) {\n//                 phoneCountryInput.addEventListener('change', function() {\n//                     itiPhone.setCountry(this.value?.trim());\n//                 });\n//             }\n//         }\n//         // After each intlTelInput instance has been created, fix issues with pre-filled values by dispatching change event on the country dropdown\n//         telInput.dispatchEvent(new KeyboardEvent('countrychange'));\n//         // Fix issues working on page with Turbolinks enabled\n//         document.addEventListener(\"turbolinks:load\", function() {\n//             if (telInput) {\n//                 telInput.dispatchEvent(new KeyboardEvent('countrychange'));\n//             }\n//         });\n//         // Fix issues working on page with Turbo enabled\n//         document.addEventListener(\"turbo:load\", function() {\n//             if (telInput) {\n//                 telInput.dispatchEvent(new KeyboardEvent('countrychange'));\n//             }\n//         });\n//     }\n//     function renderTelInput() {\n//         // Call function to initialize an instance of int tel input on all elements with .iti--laravel-tel-input attribute\n//         const telInputconfig = laravelTelInputConfig; // laravelTelInputConfig will be defined in blade\n//         const telInputs = document.querySelectorAll(\".iti--laravel-tel-input\");\n//         if (telInputs.length > 0) {\n//             for (let i = 0; i < telInputs.length; i++) {\n//                 initTelInput(telInputs[i], telInputconfig);\n//             }\n//         }\n//     }\n//     // Listen to the document events and re-render the tel inputs\n//     document.addEventListener(\"DOMContentLoaded\", function() {\n//         renderTelInput();\n//         // user dispatched browser events to re-render the tel inputs\n//         document.addEventListener(\"telDOMChanged\", function() {\n//             renderTelInput();\n//         });\n//         // Livewire event hook \n//         if (window.Livewire) {\n//             window.Livewire.hook('component.initialized', component => {\n//                 renderTelInput();\n//             });\n//         }\n//     });\n//     // \n// })();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/filament/forms/phoneinput/index.js\n");

/***/ }),

/***/ "./node_modules/intl-tel-input/build/js/intlTelInput.js":
/*!**************************************************************!*\
  !*** ./node_modules/intl-tel-input/build/js/intlTelInput.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("/*\n * International Telephone Input v17.0.18\n * https://github.com/jackocnr/intl-tel-input.git\n * Licensed under the MIT license\n */\n\n// wrap in UMD\n(function(factory) {\n    if ( true && module.exports) module.exports = factory(); else window.intlTelInput = factory();\n})(function(undefined) {\n    \"use strict\";\n    return function() {\n        // Array of country objects for the flag dropdown.\n        // Here is the criteria for the plugin to support a given country/territory\n        // - It has an iso2 code: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\n        // - It has it's own country calling code (it is not a sub-region of another country): https://en.wikipedia.org/wiki/List_of_country_calling_codes\n        // - It has a flag in the region-flags project: https://github.com/behdad/region-flags/tree/gh-pages/png\n        // - It is supported by libphonenumber (it must be listed on this page): https://github.com/googlei18n/libphonenumber/blob/master/resources/ShortNumberMetadata.xml\n        // Each country array has the following information:\n        // [\n        //    Country name,\n        //    iso2 code,\n        //    International dial code,\n        //    Order (if >1 country with same dial code),\n        //    Area codes\n        // ]\n        var allCountries = [ [ \"Afghanistan (‫افغانستان‬‎)\", \"af\", \"93\" ], [ \"Albania (Shqipëri)\", \"al\", \"355\" ], [ \"Algeria (‫الجزائر‬‎)\", \"dz\", \"213\" ], [ \"American Samoa\", \"as\", \"1\", 5, [ \"684\" ] ], [ \"Andorra\", \"ad\", \"376\" ], [ \"Angola\", \"ao\", \"244\" ], [ \"Anguilla\", \"ai\", \"1\", 6, [ \"264\" ] ], [ \"Antigua and Barbuda\", \"ag\", \"1\", 7, [ \"268\" ] ], [ \"Argentina\", \"ar\", \"54\" ], [ \"Armenia (Հայաստան)\", \"am\", \"374\" ], [ \"Aruba\", \"aw\", \"297\" ], [ \"Ascension Island\", \"ac\", \"247\" ], [ \"Australia\", \"au\", \"61\", 0 ], [ \"Austria (Österreich)\", \"at\", \"43\" ], [ \"Azerbaijan (Azərbaycan)\", \"az\", \"994\" ], [ \"Bahamas\", \"bs\", \"1\", 8, [ \"242\" ] ], [ \"Bahrain (‫البحرين‬‎)\", \"bh\", \"973\" ], [ \"Bangladesh (বাংলাদেশ)\", \"bd\", \"880\" ], [ \"Barbados\", \"bb\", \"1\", 9, [ \"246\" ] ], [ \"Belarus (Беларусь)\", \"by\", \"375\" ], [ \"Belgium (België)\", \"be\", \"32\" ], [ \"Belize\", \"bz\", \"501\" ], [ \"Benin (Bénin)\", \"bj\", \"229\" ], [ \"Bermuda\", \"bm\", \"1\", 10, [ \"441\" ] ], [ \"Bhutan (འབྲུག)\", \"bt\", \"975\" ], [ \"Bolivia\", \"bo\", \"591\" ], [ \"Bosnia and Herzegovina (Босна и Херцеговина)\", \"ba\", \"387\" ], [ \"Botswana\", \"bw\", \"267\" ], [ \"Brazil (Brasil)\", \"br\", \"55\" ], [ \"British Indian Ocean Territory\", \"io\", \"246\" ], [ \"British Virgin Islands\", \"vg\", \"1\", 11, [ \"284\" ] ], [ \"Brunei\", \"bn\", \"673\" ], [ \"Bulgaria (България)\", \"bg\", \"359\" ], [ \"Burkina Faso\", \"bf\", \"226\" ], [ \"Burundi (Uburundi)\", \"bi\", \"257\" ], [ \"Cambodia (កម្ពុជា)\", \"kh\", \"855\" ], [ \"Cameroon (Cameroun)\", \"cm\", \"237\" ], [ \"Canada\", \"ca\", \"1\", 1, [ \"204\", \"226\", \"236\", \"249\", \"250\", \"289\", \"306\", \"343\", \"365\", \"387\", \"403\", \"416\", \"418\", \"431\", \"437\", \"438\", \"450\", \"506\", \"514\", \"519\", \"548\", \"579\", \"581\", \"587\", \"604\", \"613\", \"639\", \"647\", \"672\", \"705\", \"709\", \"742\", \"778\", \"780\", \"782\", \"807\", \"819\", \"825\", \"867\", \"873\", \"902\", \"905\" ] ], [ \"Cape Verde (Kabu Verdi)\", \"cv\", \"238\" ], [ \"Caribbean Netherlands\", \"bq\", \"599\", 1, [ \"3\", \"4\", \"7\" ] ], [ \"Cayman Islands\", \"ky\", \"1\", 12, [ \"345\" ] ], [ \"Central African Republic (République centrafricaine)\", \"cf\", \"236\" ], [ \"Chad (Tchad)\", \"td\", \"235\" ], [ \"Chile\", \"cl\", \"56\" ], [ \"China (中国)\", \"cn\", \"86\" ], [ \"Christmas Island\", \"cx\", \"61\", 2, [ \"89164\" ] ], [ \"Cocos (Keeling) Islands\", \"cc\", \"61\", 1, [ \"89162\" ] ], [ \"Colombia\", \"co\", \"57\" ], [ \"Comoros (‫جزر القمر‬‎)\", \"km\", \"269\" ], [ \"Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)\", \"cd\", \"243\" ], [ \"Congo (Republic) (Congo-Brazzaville)\", \"cg\", \"242\" ], [ \"Cook Islands\", \"ck\", \"682\" ], [ \"Costa Rica\", \"cr\", \"506\" ], [ \"Côte d’Ivoire\", \"ci\", \"225\" ], [ \"Croatia (Hrvatska)\", \"hr\", \"385\" ], [ \"Cuba\", \"cu\", \"53\" ], [ \"Curaçao\", \"cw\", \"599\", 0 ], [ \"Cyprus (Κύπρος)\", \"cy\", \"357\" ], [ \"Czech Republic (Česká republika)\", \"cz\", \"420\" ], [ \"Denmark (Danmark)\", \"dk\", \"45\" ], [ \"Djibouti\", \"dj\", \"253\" ], [ \"Dominica\", \"dm\", \"1\", 13, [ \"767\" ] ], [ \"Dominican Republic (República Dominicana)\", \"do\", \"1\", 2, [ \"809\", \"829\", \"849\" ] ], [ \"Ecuador\", \"ec\", \"593\" ], [ \"Egypt (‫مصر‬‎)\", \"eg\", \"20\" ], [ \"El Salvador\", \"sv\", \"503\" ], [ \"Equatorial Guinea (Guinea Ecuatorial)\", \"gq\", \"240\" ], [ \"Eritrea\", \"er\", \"291\" ], [ \"Estonia (Eesti)\", \"ee\", \"372\" ], [ \"Eswatini\", \"sz\", \"268\" ], [ \"Ethiopia\", \"et\", \"251\" ], [ \"Falkland Islands (Islas Malvinas)\", \"fk\", \"500\" ], [ \"Faroe Islands (Føroyar)\", \"fo\", \"298\" ], [ \"Fiji\", \"fj\", \"679\" ], [ \"Finland (Suomi)\", \"fi\", \"358\", 0 ], [ \"France\", \"fr\", \"33\" ], [ \"French Guiana (Guyane française)\", \"gf\", \"594\" ], [ \"French Polynesia (Polynésie française)\", \"pf\", \"689\" ], [ \"Gabon\", \"ga\", \"241\" ], [ \"Gambia\", \"gm\", \"220\" ], [ \"Georgia (საქართველო)\", \"ge\", \"995\" ], [ \"Germany (Deutschland)\", \"de\", \"49\" ], [ \"Ghana (Gaana)\", \"gh\", \"233\" ], [ \"Gibraltar\", \"gi\", \"350\" ], [ \"Greece (Ελλάδα)\", \"gr\", \"30\" ], [ \"Greenland (Kalaallit Nunaat)\", \"gl\", \"299\" ], [ \"Grenada\", \"gd\", \"1\", 14, [ \"473\" ] ], [ \"Guadeloupe\", \"gp\", \"590\", 0 ], [ \"Guam\", \"gu\", \"1\", 15, [ \"671\" ] ], [ \"Guatemala\", \"gt\", \"502\" ], [ \"Guernsey\", \"gg\", \"44\", 1, [ \"1481\", \"7781\", \"7839\", \"7911\" ] ], [ \"Guinea (Guinée)\", \"gn\", \"224\" ], [ \"Guinea-Bissau (Guiné Bissau)\", \"gw\", \"245\" ], [ \"Guyana\", \"gy\", \"592\" ], [ \"Haiti\", \"ht\", \"509\" ], [ \"Honduras\", \"hn\", \"504\" ], [ \"Hong Kong (香港)\", \"hk\", \"852\" ], [ \"Hungary (Magyarország)\", \"hu\", \"36\" ], [ \"Iceland (Ísland)\", \"is\", \"354\" ], [ \"India (भारत)\", \"in\", \"91\" ], [ \"Indonesia\", \"id\", \"62\" ], [ \"Iran (‫ایران‬‎)\", \"ir\", \"98\" ], [ \"Iraq (‫العراق‬‎)\", \"iq\", \"964\" ], [ \"Ireland\", \"ie\", \"353\" ], [ \"Isle of Man\", \"im\", \"44\", 2, [ \"1624\", \"74576\", \"7524\", \"7924\", \"7624\" ] ], [ \"Israel (‫ישראל‬‎)\", \"il\", \"972\" ], [ \"Italy (Italia)\", \"it\", \"39\", 0 ], [ \"Jamaica\", \"jm\", \"1\", 4, [ \"876\", \"658\" ] ], [ \"Japan (日本)\", \"jp\", \"81\" ], [ \"Jersey\", \"je\", \"44\", 3, [ \"1534\", \"7509\", \"7700\", \"7797\", \"7829\", \"7937\" ] ], [ \"Jordan (‫الأردن‬‎)\", \"jo\", \"962\" ], [ \"Kazakhstan (Казахстан)\", \"kz\", \"7\", 1, [ \"33\", \"7\" ] ], [ \"Kenya\", \"ke\", \"254\" ], [ \"Kiribati\", \"ki\", \"686\" ], [ \"Kosovo\", \"xk\", \"383\" ], [ \"Kuwait (‫الكويت‬‎)\", \"kw\", \"965\" ], [ \"Kyrgyzstan (Кыргызстан)\", \"kg\", \"996\" ], [ \"Laos (ລາວ)\", \"la\", \"856\" ], [ \"Latvia (Latvija)\", \"lv\", \"371\" ], [ \"Lebanon (‫لبنان‬‎)\", \"lb\", \"961\" ], [ \"Lesotho\", \"ls\", \"266\" ], [ \"Liberia\", \"lr\", \"231\" ], [ \"Libya (‫ليبيا‬‎)\", \"ly\", \"218\" ], [ \"Liechtenstein\", \"li\", \"423\" ], [ \"Lithuania (Lietuva)\", \"lt\", \"370\" ], [ \"Luxembourg\", \"lu\", \"352\" ], [ \"Macau (澳門)\", \"mo\", \"853\" ], [ \"North Macedonia (Македонија)\", \"mk\", \"389\" ], [ \"Madagascar (Madagasikara)\", \"mg\", \"261\" ], [ \"Malawi\", \"mw\", \"265\" ], [ \"Malaysia\", \"my\", \"60\" ], [ \"Maldives\", \"mv\", \"960\" ], [ \"Mali\", \"ml\", \"223\" ], [ \"Malta\", \"mt\", \"356\" ], [ \"Marshall Islands\", \"mh\", \"692\" ], [ \"Martinique\", \"mq\", \"596\" ], [ \"Mauritania (‫موريتانيا‬‎)\", \"mr\", \"222\" ], [ \"Mauritius (Moris)\", \"mu\", \"230\" ], [ \"Mayotte\", \"yt\", \"262\", 1, [ \"269\", \"639\" ] ], [ \"Mexico (México)\", \"mx\", \"52\" ], [ \"Micronesia\", \"fm\", \"691\" ], [ \"Moldova (Republica Moldova)\", \"md\", \"373\" ], [ \"Monaco\", \"mc\", \"377\" ], [ \"Mongolia (Монгол)\", \"mn\", \"976\" ], [ \"Montenegro (Crna Gora)\", \"me\", \"382\" ], [ \"Montserrat\", \"ms\", \"1\", 16, [ \"664\" ] ], [ \"Morocco (‫المغرب‬‎)\", \"ma\", \"212\", 0 ], [ \"Mozambique (Moçambique)\", \"mz\", \"258\" ], [ \"Myanmar (Burma) (မြန်မာ)\", \"mm\", \"95\" ], [ \"Namibia (Namibië)\", \"na\", \"264\" ], [ \"Nauru\", \"nr\", \"674\" ], [ \"Nepal (नेपाल)\", \"np\", \"977\" ], [ \"Netherlands (Nederland)\", \"nl\", \"31\" ], [ \"New Caledonia (Nouvelle-Calédonie)\", \"nc\", \"687\" ], [ \"New Zealand\", \"nz\", \"64\" ], [ \"Nicaragua\", \"ni\", \"505\" ], [ \"Niger (Nijar)\", \"ne\", \"227\" ], [ \"Nigeria\", \"ng\", \"234\" ], [ \"Niue\", \"nu\", \"683\" ], [ \"Norfolk Island\", \"nf\", \"672\" ], [ \"North Korea (조선 민주주의 인민 공화국)\", \"kp\", \"850\" ], [ \"Northern Mariana Islands\", \"mp\", \"1\", 17, [ \"670\" ] ], [ \"Norway (Norge)\", \"no\", \"47\", 0 ], [ \"Oman (‫عُمان‬‎)\", \"om\", \"968\" ], [ \"Pakistan (‫پاکستان‬‎)\", \"pk\", \"92\" ], [ \"Palau\", \"pw\", \"680\" ], [ \"Palestine (‫فلسطين‬‎)\", \"ps\", \"970\" ], [ \"Panama (Panamá)\", \"pa\", \"507\" ], [ \"Papua New Guinea\", \"pg\", \"675\" ], [ \"Paraguay\", \"py\", \"595\" ], [ \"Peru (Perú)\", \"pe\", \"51\" ], [ \"Philippines\", \"ph\", \"63\" ], [ \"Poland (Polska)\", \"pl\", \"48\" ], [ \"Portugal\", \"pt\", \"351\" ], [ \"Puerto Rico\", \"pr\", \"1\", 3, [ \"787\", \"939\" ] ], [ \"Qatar (‫قطر‬‎)\", \"qa\", \"974\" ], [ \"Réunion (La Réunion)\", \"re\", \"262\", 0 ], [ \"Romania (România)\", \"ro\", \"40\" ], [ \"Russia (Россия)\", \"ru\", \"7\", 0 ], [ \"Rwanda\", \"rw\", \"250\" ], [ \"Saint Barthélemy\", \"bl\", \"590\", 1 ], [ \"Saint Helena\", \"sh\", \"290\" ], [ \"Saint Kitts and Nevis\", \"kn\", \"1\", 18, [ \"869\" ] ], [ \"Saint Lucia\", \"lc\", \"1\", 19, [ \"758\" ] ], [ \"Saint Martin (Saint-Martin (partie française))\", \"mf\", \"590\", 2 ], [ \"Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)\", \"pm\", \"508\" ], [ \"Saint Vincent and the Grenadines\", \"vc\", \"1\", 20, [ \"784\" ] ], [ \"Samoa\", \"ws\", \"685\" ], [ \"San Marino\", \"sm\", \"378\" ], [ \"São Tomé and Príncipe (São Tomé e Príncipe)\", \"st\", \"239\" ], [ \"Saudi Arabia (‫المملكة العربية السعودية‬‎)\", \"sa\", \"966\" ], [ \"Senegal (Sénégal)\", \"sn\", \"221\" ], [ \"Serbia (Србија)\", \"rs\", \"381\" ], [ \"Seychelles\", \"sc\", \"248\" ], [ \"Sierra Leone\", \"sl\", \"232\" ], [ \"Singapore\", \"sg\", \"65\" ], [ \"Sint Maarten\", \"sx\", \"1\", 21, [ \"721\" ] ], [ \"Slovakia (Slovensko)\", \"sk\", \"421\" ], [ \"Slovenia (Slovenija)\", \"si\", \"386\" ], [ \"Solomon Islands\", \"sb\", \"677\" ], [ \"Somalia (Soomaaliya)\", \"so\", \"252\" ], [ \"South Africa\", \"za\", \"27\" ], [ \"South Korea (대한민국)\", \"kr\", \"82\" ], [ \"South Sudan (‫جنوب السودان‬‎)\", \"ss\", \"211\" ], [ \"Spain (España)\", \"es\", \"34\" ], [ \"Sri Lanka (ශ්‍රී ලංකාව)\", \"lk\", \"94\" ], [ \"Sudan (‫السودان‬‎)\", \"sd\", \"249\" ], [ \"Suriname\", \"sr\", \"597\" ], [ \"Svalbard and Jan Mayen\", \"sj\", \"47\", 1, [ \"79\" ] ], [ \"Sweden (Sverige)\", \"se\", \"46\" ], [ \"Switzerland (Schweiz)\", \"ch\", \"41\" ], [ \"Syria (‫سوريا‬‎)\", \"sy\", \"963\" ], [ \"Taiwan (台灣)\", \"tw\", \"886\" ], [ \"Tajikistan\", \"tj\", \"992\" ], [ \"Tanzania\", \"tz\", \"255\" ], [ \"Thailand (ไทย)\", \"th\", \"66\" ], [ \"Timor-Leste\", \"tl\", \"670\" ], [ \"Togo\", \"tg\", \"228\" ], [ \"Tokelau\", \"tk\", \"690\" ], [ \"Tonga\", \"to\", \"676\" ], [ \"Trinidad and Tobago\", \"tt\", \"1\", 22, [ \"868\" ] ], [ \"Tunisia (‫تونس‬‎)\", \"tn\", \"216\" ], [ \"Turkey (Türkiye)\", \"tr\", \"90\" ], [ \"Turkmenistan\", \"tm\", \"993\" ], [ \"Turks and Caicos Islands\", \"tc\", \"1\", 23, [ \"649\" ] ], [ \"Tuvalu\", \"tv\", \"688\" ], [ \"U.S. Virgin Islands\", \"vi\", \"1\", 24, [ \"340\" ] ], [ \"Uganda\", \"ug\", \"256\" ], [ \"Ukraine (Україна)\", \"ua\", \"380\" ], [ \"United Arab Emirates (‫الإمارات العربية المتحدة‬‎)\", \"ae\", \"971\" ], [ \"United Kingdom\", \"gb\", \"44\", 0 ], [ \"United States\", \"us\", \"1\", 0 ], [ \"Uruguay\", \"uy\", \"598\" ], [ \"Uzbekistan (Oʻzbekiston)\", \"uz\", \"998\" ], [ \"Vanuatu\", \"vu\", \"678\" ], [ \"Vatican City (Città del Vaticano)\", \"va\", \"39\", 1, [ \"06698\" ] ], [ \"Venezuela\", \"ve\", \"58\" ], [ \"Vietnam (Việt Nam)\", \"vn\", \"84\" ], [ \"Wallis and Futuna (Wallis-et-Futuna)\", \"wf\", \"681\" ], [ \"Western Sahara (‫الصحراء الغربية‬‎)\", \"eh\", \"212\", 1, [ \"5288\", \"5289\" ] ], [ \"Yemen (‫اليمن‬‎)\", \"ye\", \"967\" ], [ \"Zambia\", \"zm\", \"260\" ], [ \"Zimbabwe\", \"zw\", \"263\" ], [ \"Åland Islands\", \"ax\", \"358\", 1, [ \"18\" ] ] ];\n        // loop over all of the countries above, restructuring the data to be objects with named keys\n        for (var i = 0; i < allCountries.length; i++) {\n            var c = allCountries[i];\n            allCountries[i] = {\n                name: c[0],\n                iso2: c[1],\n                dialCode: c[2],\n                priority: c[3] || 0,\n                areaCodes: c[4] || null\n            };\n        }\n        \"use strict\";\n        function _classCallCheck(instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n                throw new TypeError(\"Cannot call a class as a function\");\n            }\n        }\n        function _defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];\n                descriptor.enumerable = descriptor.enumerable || false;\n                descriptor.configurable = true;\n                if (\"value\" in descriptor) descriptor.writable = true;\n                Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }\n        function _createClass(Constructor, protoProps, staticProps) {\n            if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) _defineProperties(Constructor, staticProps);\n            return Constructor;\n        }\n        var intlTelInputGlobals = {\n            getInstance: function getInstance(input) {\n                var id = input.getAttribute(\"data-intl-tel-input-id\");\n                return window.intlTelInputGlobals.instances[id];\n            },\n            instances: {},\n            // using a global like this allows us to mock it in the tests\n            documentReady: function documentReady() {\n                return document.readyState === \"complete\";\n            }\n        };\n        if (typeof window === \"object\") window.intlTelInputGlobals = intlTelInputGlobals;\n        // these vars persist through all instances of the plugin\n        var id = 0;\n        var defaults = {\n            // whether or not to allow the dropdown\n            allowDropdown: true,\n            // if there is just a dial code in the input: remove it on blur\n            autoHideDialCode: true,\n            // add a placeholder in the input with an example number for the selected country\n            autoPlaceholder: \"polite\",\n            // modify the parentClass\n            customContainer: \"\",\n            // modify the auto placeholder\n            customPlaceholder: null,\n            // append menu to specified element\n            dropdownContainer: null,\n            // don't display these countries\n            excludeCountries: [],\n            // format the input value during initialisation and on setNumber\n            formatOnDisplay: true,\n            // geoIp lookup function\n            geoIpLookup: null,\n            // inject a hidden input with this name, and on submit, populate it with the result of getNumber\n            hiddenInput: \"\",\n            // initial country\n            initialCountry: \"\",\n            // localized country names e.g. { 'de': 'Deutschland' }\n            localizedCountries: null,\n            // don't insert international dial codes\n            nationalMode: true,\n            // display only these countries\n            onlyCountries: [],\n            // number type to use for placeholders\n            placeholderNumberType: \"MOBILE\",\n            // the countries at the top of the list. defaults to united states and united kingdom\n            preferredCountries: [ \"us\", \"gb\" ],\n            // display the country dial code next to the selected flag so it's not part of the typed number\n            separateDialCode: false,\n            // specify the path to the libphonenumber script to enable validation/formatting\n            utilsScript: \"\"\n        };\n        // https://en.wikipedia.org/wiki/List_of_North_American_Numbering_Plan_area_codes#Non-geographic_area_codes\n        var regionlessNanpNumbers = [ \"800\", \"822\", \"833\", \"844\", \"855\", \"866\", \"877\", \"880\", \"881\", \"882\", \"883\", \"884\", \"885\", \"886\", \"887\", \"888\", \"889\" ];\n        // utility function to iterate over an object. can't use Object.entries or native forEach because\n        // of IE11\n        var forEachProp = function forEachProp(obj, callback) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                callback(keys[i], obj[keys[i]]);\n            }\n        };\n        // run a method on each instance of the plugin\n        var forEachInstance = function forEachInstance(method) {\n            forEachProp(window.intlTelInputGlobals.instances, function(key) {\n                window.intlTelInputGlobals.instances[key][method]();\n            });\n        };\n        // this is our plugin class that we will create an instance of\n        // eslint-disable-next-line no-unused-vars\n        var Iti = /*#__PURE__*/\n        function() {\n            function Iti(input, options) {\n                var _this = this;\n                _classCallCheck(this, Iti);\n                this.id = id++;\n                this.telInput = input;\n                this.activeItem = null;\n                this.highlightedItem = null;\n                // process specified options / defaults\n                // alternative to Object.assign, which isn't supported by IE11\n                var customOptions = options || {};\n                this.options = {};\n                forEachProp(defaults, function(key, value) {\n                    _this.options[key] = customOptions.hasOwnProperty(key) ? customOptions[key] : value;\n                });\n                this.hadInitialPlaceholder = Boolean(input.getAttribute(\"placeholder\"));\n            }\n            _createClass(Iti, [ {\n                key: \"_init\",\n                value: function _init() {\n                    var _this2 = this;\n                    // if in nationalMode, disable options relating to dial codes\n                    if (this.options.nationalMode) this.options.autoHideDialCode = false;\n                    // if separateDialCode then doesn't make sense to A) insert dial code into input\n                    // (autoHideDialCode), and B) display national numbers (because we're displaying the country\n                    // dial code next to them)\n                    if (this.options.separateDialCode) {\n                        this.options.autoHideDialCode = this.options.nationalMode = false;\n                    }\n                    // we cannot just test screen size as some smartphones/website meta tags will report desktop\n                    // resolutions\n                    // Note: for some reason jasmine breaks if you put this in the main Plugin function with the\n                    // rest of these declarations\n                    // Note: to target Android Mobiles (and not Tablets), we must find 'Android' and 'Mobile'\n                    this.isMobile = /Android.+Mobile|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n                    if (this.isMobile) {\n                        // trigger the mobile dropdown css\n                        document.body.classList.add(\"iti-mobile\");\n                        // on mobile, we want a full screen dropdown, so we must append it to the body\n                        if (!this.options.dropdownContainer) this.options.dropdownContainer = document.body;\n                    }\n                    // these promises get resolved when their individual requests complete\n                    // this way the dev can do something like iti.promise.then(...) to know when all requests are\n                    // complete\n                    if (typeof Promise !== \"undefined\") {\n                        var autoCountryPromise = new Promise(function(resolve, reject) {\n                            _this2.resolveAutoCountryPromise = resolve;\n                            _this2.rejectAutoCountryPromise = reject;\n                        });\n                        var utilsScriptPromise = new Promise(function(resolve, reject) {\n                            _this2.resolveUtilsScriptPromise = resolve;\n                            _this2.rejectUtilsScriptPromise = reject;\n                        });\n                        this.promise = Promise.all([ autoCountryPromise, utilsScriptPromise ]);\n                    } else {\n                        // prevent errors when Promise doesn't exist\n                        this.resolveAutoCountryPromise = this.rejectAutoCountryPromise = function() {};\n                        this.resolveUtilsScriptPromise = this.rejectUtilsScriptPromise = function() {};\n                    }\n                    // in various situations there could be no country selected initially, but we need to be able\n                    // to assume this variable exists\n                    this.selectedCountryData = {};\n                    // process all the data: onlyCountries, excludeCountries, preferredCountries etc\n                    this._processCountryData();\n                    // generate the markup\n                    this._generateMarkup();\n                    // set the initial state of the input value and the selected flag\n                    this._setInitialState();\n                    // start all of the event listeners: autoHideDialCode, input keydown, selectedFlag click\n                    this._initListeners();\n                    // utils script, and auto country\n                    this._initRequests();\n                }\n            }, {\n                key: \"_processCountryData\",\n                value: function _processCountryData() {\n                    // process onlyCountries or excludeCountries array if present\n                    this._processAllCountries();\n                    // process the countryCodes map\n                    this._processCountryCodes();\n                    // process the preferredCountries\n                    this._processPreferredCountries();\n                    // translate countries according to localizedCountries option\n                    if (this.options.localizedCountries) this._translateCountriesByLocale();\n                    // sort countries by name\n                    if (this.options.onlyCountries.length || this.options.localizedCountries) {\n                        this.countries.sort(this._countryNameSort);\n                    }\n                }\n            }, {\n                key: \"_addCountryCode\",\n                value: function _addCountryCode(iso2, countryCode, priority) {\n                    if (countryCode.length > this.countryCodeMaxLen) {\n                        this.countryCodeMaxLen = countryCode.length;\n                    }\n                    if (!this.countryCodes.hasOwnProperty(countryCode)) {\n                        this.countryCodes[countryCode] = [];\n                    }\n                    // bail if we already have this country for this countryCode\n                    for (var i = 0; i < this.countryCodes[countryCode].length; i++) {\n                        if (this.countryCodes[countryCode][i] === iso2) return;\n                    }\n                    // check for undefined as 0 is falsy\n                    var index = priority !== undefined ? priority : this.countryCodes[countryCode].length;\n                    this.countryCodes[countryCode][index] = iso2;\n                }\n            }, {\n                key: \"_processAllCountries\",\n                value: function _processAllCountries() {\n                    if (this.options.onlyCountries.length) {\n                        var lowerCaseOnlyCountries = this.options.onlyCountries.map(function(country) {\n                            return country.toLowerCase();\n                        });\n                        this.countries = allCountries.filter(function(country) {\n                            return lowerCaseOnlyCountries.indexOf(country.iso2) > -1;\n                        });\n                    } else if (this.options.excludeCountries.length) {\n                        var lowerCaseExcludeCountries = this.options.excludeCountries.map(function(country) {\n                            return country.toLowerCase();\n                        });\n                        this.countries = allCountries.filter(function(country) {\n                            return lowerCaseExcludeCountries.indexOf(country.iso2) === -1;\n                        });\n                    } else {\n                        this.countries = allCountries;\n                    }\n                }\n            }, {\n                key: \"_translateCountriesByLocale\",\n                value: function _translateCountriesByLocale() {\n                    for (var i = 0; i < this.countries.length; i++) {\n                        var iso = this.countries[i].iso2.toLowerCase();\n                        if (this.options.localizedCountries.hasOwnProperty(iso)) {\n                            this.countries[i].name = this.options.localizedCountries[iso];\n                        }\n                    }\n                }\n            }, {\n                key: \"_countryNameSort\",\n                value: function _countryNameSort(a, b) {\n                    return a.name.localeCompare(b.name);\n                }\n            }, {\n                key: \"_processCountryCodes\",\n                value: function _processCountryCodes() {\n                    this.countryCodeMaxLen = 0;\n                    // here we store just dial codes\n                    this.dialCodes = {};\n                    // here we store \"country codes\" (both dial codes and their area codes)\n                    this.countryCodes = {};\n                    // first: add dial codes\n                    for (var i = 0; i < this.countries.length; i++) {\n                        var c = this.countries[i];\n                        if (!this.dialCodes[c.dialCode]) this.dialCodes[c.dialCode] = true;\n                        this._addCountryCode(c.iso2, c.dialCode, c.priority);\n                    }\n                    // next: add area codes\n                    // this is a second loop over countries, to make sure we have all of the \"root\" countries\n                    // already in the map, so that we can access them, as each time we add an area code substring\n                    // to the map, we also need to include the \"root\" country's code, as that also matches\n                    for (var _i = 0; _i < this.countries.length; _i++) {\n                        var _c = this.countries[_i];\n                        // area codes\n                        if (_c.areaCodes) {\n                            var rootCountryCode = this.countryCodes[_c.dialCode][0];\n                            // for each area code\n                            for (var j = 0; j < _c.areaCodes.length; j++) {\n                                var areaCode = _c.areaCodes[j];\n                                // for each digit in the area code to add all partial matches as well\n                                for (var k = 1; k < areaCode.length; k++) {\n                                    var partialDialCode = _c.dialCode + areaCode.substr(0, k);\n                                    // start with the root country, as that also matches this dial code\n                                    this._addCountryCode(rootCountryCode, partialDialCode);\n                                    this._addCountryCode(_c.iso2, partialDialCode);\n                                }\n                                // add the full area code\n                                this._addCountryCode(_c.iso2, _c.dialCode + areaCode);\n                            }\n                        }\n                    }\n                }\n            }, {\n                key: \"_processPreferredCountries\",\n                value: function _processPreferredCountries() {\n                    this.preferredCountries = [];\n                    for (var i = 0; i < this.options.preferredCountries.length; i++) {\n                        var countryCode = this.options.preferredCountries[i].toLowerCase();\n                        var countryData = this._getCountryData(countryCode, false, true);\n                        if (countryData) this.preferredCountries.push(countryData);\n                    }\n                }\n            }, {\n                key: \"_createEl\",\n                value: function _createEl(name, attrs, container) {\n                    var el = document.createElement(name);\n                    if (attrs) forEachProp(attrs, function(key, value) {\n                        return el.setAttribute(key, value);\n                    });\n                    if (container) container.appendChild(el);\n                    return el;\n                }\n            }, {\n                key: \"_generateMarkup\",\n                value: function _generateMarkup() {\n                    // if autocomplete does not exist on the element and its form, then\n                    // prevent autocomplete as there's no safe, cross-browser event we can react to, so it can\n                    // easily put the plugin in an inconsistent state e.g. the wrong flag selected for the\n                    // autocompleted number, which on submit could mean wrong number is saved (esp in nationalMode)\n                    if (!this.telInput.hasAttribute(\"autocomplete\") && !(this.telInput.form && this.telInput.form.hasAttribute(\"autocomplete\"))) {\n                        this.telInput.setAttribute(\"autocomplete\", \"off\");\n                    }\n                    // containers (mostly for positioning)\n                    var parentClass = \"iti\";\n                    if (this.options.allowDropdown) parentClass += \" iti--allow-dropdown\";\n                    if (this.options.separateDialCode) parentClass += \" iti--separate-dial-code\";\n                    if (this.options.customContainer) {\n                        parentClass += \" \";\n                        parentClass += this.options.customContainer;\n                    }\n                    var wrapper = this._createEl(\"div\", {\n                        \"class\": parentClass\n                    });\n                    this.telInput.parentNode.insertBefore(wrapper, this.telInput);\n                    this.flagsContainer = this._createEl(\"div\", {\n                        \"class\": \"iti__flag-container\"\n                    }, wrapper);\n                    wrapper.appendChild(this.telInput);\n                    // selected flag (displayed to left of input)\n                    this.selectedFlag = this._createEl(\"div\", {\n                        \"class\": \"iti__selected-flag\",\n                        role: \"combobox\",\n                        \"aria-controls\": \"iti-\".concat(this.id, \"__country-listbox\"),\n                        \"aria-owns\": \"iti-\".concat(this.id, \"__country-listbox\"),\n                        \"aria-expanded\": \"false\"\n                    }, this.flagsContainer);\n                    this.selectedFlagInner = this._createEl(\"div\", {\n                        \"class\": \"iti__flag\"\n                    }, this.selectedFlag);\n                    if (this.options.separateDialCode) {\n                        this.selectedDialCode = this._createEl(\"div\", {\n                            \"class\": \"iti__selected-dial-code\"\n                        }, this.selectedFlag);\n                    }\n                    if (this.options.allowDropdown) {\n                        // make element focusable and tab navigable\n                        this.selectedFlag.setAttribute(\"tabindex\", \"0\");\n                        this.dropdownArrow = this._createEl(\"div\", {\n                            \"class\": \"iti__arrow\"\n                        }, this.selectedFlag);\n                        // country dropdown: preferred countries, then divider, then all countries\n                        this.countryList = this._createEl(\"ul\", {\n                            \"class\": \"iti__country-list iti__hide\",\n                            id: \"iti-\".concat(this.id, \"__country-listbox\"),\n                            role: \"listbox\",\n                            \"aria-label\": \"List of countries\"\n                        });\n                        if (this.preferredCountries.length) {\n                            this._appendListItems(this.preferredCountries, \"iti__preferred\", true);\n                            this._createEl(\"li\", {\n                                \"class\": \"iti__divider\",\n                                role: \"separator\",\n                                \"aria-disabled\": \"true\"\n                            }, this.countryList);\n                        }\n                        this._appendListItems(this.countries, \"iti__standard\");\n                        // create dropdownContainer markup\n                        if (this.options.dropdownContainer) {\n                            this.dropdown = this._createEl(\"div\", {\n                                \"class\": \"iti iti--container\"\n                            });\n                            this.dropdown.appendChild(this.countryList);\n                        } else {\n                            this.flagsContainer.appendChild(this.countryList);\n                        }\n                    }\n                    if (this.options.hiddenInput) {\n                        var hiddenInputName = this.options.hiddenInput;\n                        var name = this.telInput.getAttribute(\"name\");\n                        if (name) {\n                            var i = name.lastIndexOf(\"[\");\n                            // if input name contains square brackets, then give the hidden input the same name,\n                            // replacing the contents of the last set of brackets with the given hiddenInput name\n                            if (i !== -1) hiddenInputName = \"\".concat(name.substr(0, i), \"[\").concat(hiddenInputName, \"]\");\n                        }\n                        this.hiddenInput = this._createEl(\"input\", {\n                            type: \"hidden\",\n                            name: hiddenInputName\n                        });\n                        wrapper.appendChild(this.hiddenInput);\n                    }\n                }\n            }, {\n                key: \"_appendListItems\",\n                value: function _appendListItems(countries, className, preferred) {\n                    // we create so many DOM elements, it is faster to build a temp string\n                    // and then add everything to the DOM in one go at the end\n                    var tmp = \"\";\n                    // for each country\n                    for (var i = 0; i < countries.length; i++) {\n                        var c = countries[i];\n                        var idSuffix = preferred ? \"-preferred\" : \"\";\n                        // open the list item\n                        tmp += \"<li class='iti__country \".concat(className, \"' tabIndex='-1' id='iti-\").concat(this.id, \"__item-\").concat(c.iso2).concat(idSuffix, \"' role='option' data-dial-code='\").concat(c.dialCode, \"' data-country-code='\").concat(c.iso2, \"' aria-selected='false'>\");\n                        // add the flag\n                        tmp += \"<div class='iti__flag-box'><div class='iti__flag iti__\".concat(c.iso2, \"'></div></div>\");\n                        // and the country name and dial code\n                        tmp += \"<span class='iti__country-name'>\".concat(c.name, \"</span>\");\n                        tmp += \"<span class='iti__dial-code'>+\".concat(c.dialCode, \"</span>\");\n                        // close the list item\n                        tmp += \"</li>\";\n                    }\n                    this.countryList.insertAdjacentHTML(\"beforeend\", tmp);\n                }\n            }, {\n                key: \"_setInitialState\",\n                value: function _setInitialState() {\n                    // fix firefox bug: when first load page (with input with value set to number with intl dial\n                    // code) and initialising plugin removes the dial code from the input, then refresh page,\n                    // and we try to init plugin again but this time on number without dial code so get grey flag\n                    var attributeValue = this.telInput.getAttribute(\"value\");\n                    var inputValue = this.telInput.value;\n                    var useAttribute = attributeValue && attributeValue.charAt(0) === \"+\" && (!inputValue || inputValue.charAt(0) !== \"+\");\n                    var val = useAttribute ? attributeValue : inputValue;\n                    var dialCode = this._getDialCode(val);\n                    var isRegionlessNanp = this._isRegionlessNanp(val);\n                    var _this$options = this.options, initialCountry = _this$options.initialCountry, nationalMode = _this$options.nationalMode, autoHideDialCode = _this$options.autoHideDialCode, separateDialCode = _this$options.separateDialCode;\n                    // if we already have a dial code, and it's not a regionlessNanp, we can go ahead and set the\n                    // flag, else fall back to the default country\n                    if (dialCode && !isRegionlessNanp) {\n                        this._updateFlagFromNumber(val);\n                    } else if (initialCountry !== \"auto\") {\n                        // see if we should select a flag\n                        if (initialCountry) {\n                            this._setFlag(initialCountry.toLowerCase());\n                        } else {\n                            if (dialCode && isRegionlessNanp) {\n                                // has intl dial code, is regionless nanp, and no initialCountry, so default to US\n                                this._setFlag(\"us\");\n                            } else {\n                                // no dial code and no initialCountry, so default to first in list\n                                this.defaultCountry = this.preferredCountries.length ? this.preferredCountries[0].iso2 : this.countries[0].iso2;\n                                if (!val) {\n                                    this._setFlag(this.defaultCountry);\n                                }\n                            }\n                        }\n                        // if empty and no nationalMode and no autoHideDialCode then insert the default dial code\n                        if (!val && !nationalMode && !autoHideDialCode && !separateDialCode) {\n                            this.telInput.value = \"+\".concat(this.selectedCountryData.dialCode);\n                        }\n                    }\n                    // NOTE: if initialCountry is set to auto, that will be handled separately\n                    // format - note this wont be run after _updateDialCode as that's only called if no val\n                    if (val) this._updateValFromNumber(val);\n                }\n            }, {\n                key: \"_initListeners\",\n                value: function _initListeners() {\n                    this._initKeyListeners();\n                    if (this.options.autoHideDialCode) this._initBlurListeners();\n                    if (this.options.allowDropdown) this._initDropdownListeners();\n                    if (this.hiddenInput) this._initHiddenInputListener();\n                }\n            }, {\n                key: \"_initHiddenInputListener\",\n                value: function _initHiddenInputListener() {\n                    var _this3 = this;\n                    this._handleHiddenInputSubmit = function() {\n                        _this3.hiddenInput.value = _this3.getNumber();\n                    };\n                    if (this.telInput.form) this.telInput.form.addEventListener(\"submit\", this._handleHiddenInputSubmit);\n                }\n            }, {\n                key: \"_getClosestLabel\",\n                value: function _getClosestLabel() {\n                    var el = this.telInput;\n                    while (el && el.tagName !== \"LABEL\") {\n                        el = el.parentNode;\n                    }\n                    return el;\n                }\n            }, {\n                key: \"_initDropdownListeners\",\n                value: function _initDropdownListeners() {\n                    var _this4 = this;\n                    // hack for input nested inside label (which is valid markup): clicking the selected-flag to\n                    // open the dropdown would then automatically trigger a 2nd click on the input which would\n                    // close it again\n                    this._handleLabelClick = function(e) {\n                        // if the dropdown is closed, then focus the input, else ignore the click\n                        if (_this4.countryList.classList.contains(\"iti__hide\")) _this4.telInput.focus(); else e.preventDefault();\n                    };\n                    var label = this._getClosestLabel();\n                    if (label) label.addEventListener(\"click\", this._handleLabelClick);\n                    // toggle country dropdown on click\n                    this._handleClickSelectedFlag = function() {\n                        // only intercept this event if we're opening the dropdown\n                        // else let it bubble up to the top (\"click-off-to-close\" listener)\n                        // we cannot just stopPropagation as it may be needed to close another instance\n                        if (_this4.countryList.classList.contains(\"iti__hide\") && !_this4.telInput.disabled && !_this4.telInput.readOnly) {\n                            _this4._showDropdown();\n                        }\n                    };\n                    this.selectedFlag.addEventListener(\"click\", this._handleClickSelectedFlag);\n                    // open dropdown list if currently focused\n                    this._handleFlagsContainerKeydown = function(e) {\n                        var isDropdownHidden = _this4.countryList.classList.contains(\"iti__hide\");\n                        if (isDropdownHidden && [ \"ArrowUp\", \"Up\", \"ArrowDown\", \"Down\", \" \", \"Enter\" ].indexOf(e.key) !== -1) {\n                            // prevent form from being submitted if \"ENTER\" was pressed\n                            e.preventDefault();\n                            // prevent event from being handled again by document\n                            e.stopPropagation();\n                            _this4._showDropdown();\n                        }\n                        // allow navigation from dropdown to input on TAB\n                        if (e.key === \"Tab\") _this4._closeDropdown();\n                    };\n                    this.flagsContainer.addEventListener(\"keydown\", this._handleFlagsContainerKeydown);\n                }\n            }, {\n                key: \"_initRequests\",\n                value: function _initRequests() {\n                    var _this5 = this;\n                    // if the user has specified the path to the utils script, fetch it on window.load, else resolve\n                    if (this.options.utilsScript && !window.intlTelInputUtils) {\n                        // if the plugin is being initialised after the window.load event has already been fired\n                        if (window.intlTelInputGlobals.documentReady()) {\n                            window.intlTelInputGlobals.loadUtils(this.options.utilsScript);\n                        } else {\n                            // wait until the load event so we don't block any other requests e.g. the flags image\n                            window.addEventListener(\"load\", function() {\n                                window.intlTelInputGlobals.loadUtils(_this5.options.utilsScript);\n                            });\n                        }\n                    } else this.resolveUtilsScriptPromise();\n                    if (this.options.initialCountry === \"auto\") this._loadAutoCountry(); else this.resolveAutoCountryPromise();\n                }\n            }, {\n                key: \"_loadAutoCountry\",\n                value: function _loadAutoCountry() {\n                    // 3 options:\n                    // 1) already loaded (we're done)\n                    // 2) not already started loading (start)\n                    // 3) already started loading (do nothing - just wait for loading callback to fire)\n                    if (window.intlTelInputGlobals.autoCountry) {\n                        this.handleAutoCountry();\n                    } else if (!window.intlTelInputGlobals.startedLoadingAutoCountry) {\n                        // don't do this twice!\n                        window.intlTelInputGlobals.startedLoadingAutoCountry = true;\n                        if (typeof this.options.geoIpLookup === \"function\") {\n                            this.options.geoIpLookup(function(countryCode) {\n                                window.intlTelInputGlobals.autoCountry = countryCode.toLowerCase();\n                                // tell all instances the auto country is ready\n                                // TODO: this should just be the current instances\n                                // UPDATE: use setTimeout in case their geoIpLookup function calls this callback straight\n                                // away (e.g. if they have already done the geo ip lookup somewhere else). Using\n                                // setTimeout means that the current thread of execution will finish before executing\n                                // this, which allows the plugin to finish initialising.\n                                setTimeout(function() {\n                                    return forEachInstance(\"handleAutoCountry\");\n                                });\n                            }, function() {\n                                return forEachInstance(\"rejectAutoCountryPromise\");\n                            });\n                        }\n                    }\n                }\n            }, {\n                key: \"_initKeyListeners\",\n                value: function _initKeyListeners() {\n                    var _this6 = this;\n                    // update flag on keyup\n                    this._handleKeyupEvent = function() {\n                        if (_this6._updateFlagFromNumber(_this6.telInput.value)) {\n                            _this6._triggerCountryChange();\n                        }\n                    };\n                    this.telInput.addEventListener(\"keyup\", this._handleKeyupEvent);\n                    // update flag on cut/paste events (now supported in all major browsers)\n                    this._handleClipboardEvent = function() {\n                        // hack because \"paste\" event is fired before input is updated\n                        setTimeout(_this6._handleKeyupEvent);\n                    };\n                    this.telInput.addEventListener(\"cut\", this._handleClipboardEvent);\n                    this.telInput.addEventListener(\"paste\", this._handleClipboardEvent);\n                }\n            }, {\n                key: \"_cap\",\n                value: function _cap(number) {\n                    var max = this.telInput.getAttribute(\"maxlength\");\n                    return max && number.length > max ? number.substr(0, max) : number;\n                }\n            }, {\n                key: \"_initBlurListeners\",\n                value: function _initBlurListeners() {\n                    var _this7 = this;\n                    // on blur or form submit: if just a dial code then remove it\n                    this._handleSubmitOrBlurEvent = function() {\n                        _this7._removeEmptyDialCode();\n                    };\n                    if (this.telInput.form) this.telInput.form.addEventListener(\"submit\", this._handleSubmitOrBlurEvent);\n                    this.telInput.addEventListener(\"blur\", this._handleSubmitOrBlurEvent);\n                }\n            }, {\n                key: \"_removeEmptyDialCode\",\n                value: function _removeEmptyDialCode() {\n                    if (this.telInput.value.charAt(0) === \"+\") {\n                        var numeric = this._getNumeric(this.telInput.value);\n                        // if just a plus, or if just a dial code\n                        if (!numeric || this.selectedCountryData.dialCode === numeric) {\n                            this.telInput.value = \"\";\n                        }\n                    }\n                }\n            }, {\n                key: \"_getNumeric\",\n                value: function _getNumeric(s) {\n                    return s.replace(/\\D/g, \"\");\n                }\n            }, {\n                key: \"_trigger\",\n                value: function _trigger(name) {\n                    // have to use old school document.createEvent as IE11 doesn't support `new Event()` syntax\n                    var e = document.createEvent(\"Event\");\n                    e.initEvent(name, true, true);\n                    // can bubble, and is cancellable\n                    this.telInput.dispatchEvent(e);\n                }\n            }, {\n                key: \"_showDropdown\",\n                value: function _showDropdown() {\n                    this.countryList.classList.remove(\"iti__hide\");\n                    this.selectedFlag.setAttribute(\"aria-expanded\", \"true\");\n                    this._setDropdownPosition();\n                    // update highlighting and scroll to active list item\n                    if (this.activeItem) {\n                        this._highlightListItem(this.activeItem, false);\n                        this._scrollTo(this.activeItem, true);\n                    }\n                    // bind all the dropdown-related listeners: mouseover, click, click-off, keydown\n                    this._bindDropdownListeners();\n                    // update the arrow\n                    this.dropdownArrow.classList.add(\"iti__arrow--up\");\n                    this._trigger(\"open:countrydropdown\");\n                }\n            }, {\n                key: \"_toggleClass\",\n                value: function _toggleClass(el, className, shouldHaveClass) {\n                    if (shouldHaveClass && !el.classList.contains(className)) el.classList.add(className); else if (!shouldHaveClass && el.classList.contains(className)) el.classList.remove(className);\n                }\n            }, {\n                key: \"_setDropdownPosition\",\n                value: function _setDropdownPosition() {\n                    var _this8 = this;\n                    if (this.options.dropdownContainer) {\n                        this.options.dropdownContainer.appendChild(this.dropdown);\n                    }\n                    if (!this.isMobile) {\n                        var pos = this.telInput.getBoundingClientRect();\n                        // windowTop from https://stackoverflow.com/a/14384091/217866\n                        var windowTop = window.pageYOffset || document.documentElement.scrollTop;\n                        var inputTop = pos.top + windowTop;\n                        var dropdownHeight = this.countryList.offsetHeight;\n                        // dropdownFitsBelow = (dropdownBottom < windowBottom)\n                        var dropdownFitsBelow = inputTop + this.telInput.offsetHeight + dropdownHeight < windowTop + window.innerHeight;\n                        var dropdownFitsAbove = inputTop - dropdownHeight > windowTop;\n                        // by default, the dropdown will be below the input. If we want to position it above the\n                        // input, we add the dropup class.\n                        this._toggleClass(this.countryList, \"iti__country-list--dropup\", !dropdownFitsBelow && dropdownFitsAbove);\n                        // if dropdownContainer is enabled, calculate postion\n                        if (this.options.dropdownContainer) {\n                            // by default the dropdown will be directly over the input because it's not in the flow.\n                            // If we want to position it below, we need to add some extra top value.\n                            var extraTop = !dropdownFitsBelow && dropdownFitsAbove ? 0 : this.telInput.offsetHeight;\n                            // calculate placement\n                            this.dropdown.style.top = \"\".concat(inputTop + extraTop, \"px\");\n                            this.dropdown.style.left = \"\".concat(pos.left + document.body.scrollLeft, \"px\");\n                            // close menu on window scroll\n                            this._handleWindowScroll = function() {\n                                return _this8._closeDropdown();\n                            };\n                            window.addEventListener(\"scroll\", this._handleWindowScroll);\n                        }\n                    }\n                }\n            }, {\n                key: \"_getClosestListItem\",\n                value: function _getClosestListItem(target) {\n                    var el = target;\n                    while (el && el !== this.countryList && !el.classList.contains(\"iti__country\")) {\n                        el = el.parentNode;\n                    }\n                    // if we reached the countryList element, then return null\n                    return el === this.countryList ? null : el;\n                }\n            }, {\n                key: \"_bindDropdownListeners\",\n                value: function _bindDropdownListeners() {\n                    var _this9 = this;\n                    // when mouse over a list item, just highlight that one\n                    // we add the class \"highlight\", so if they hit \"enter\" we know which one to select\n                    this._handleMouseoverCountryList = function(e) {\n                        // handle event delegation, as we're listening for this event on the countryList\n                        var listItem = _this9._getClosestListItem(e.target);\n                        if (listItem) _this9._highlightListItem(listItem, false);\n                    };\n                    this.countryList.addEventListener(\"mouseover\", this._handleMouseoverCountryList);\n                    // listen for country selection\n                    this._handleClickCountryList = function(e) {\n                        var listItem = _this9._getClosestListItem(e.target);\n                        if (listItem) _this9._selectListItem(listItem);\n                    };\n                    this.countryList.addEventListener(\"click\", this._handleClickCountryList);\n                    // click off to close\n                    // (except when this initial opening click is bubbling up)\n                    // we cannot just stopPropagation as it may be needed to close another instance\n                    var isOpening = true;\n                    this._handleClickOffToClose = function() {\n                        if (!isOpening) _this9._closeDropdown();\n                        isOpening = false;\n                    };\n                    document.documentElement.addEventListener(\"click\", this._handleClickOffToClose);\n                    // listen for up/down scrolling, enter to select, or letters to jump to country name.\n                    // use keydown as keypress doesn't fire for non-char keys and we want to catch if they\n                    // just hit down and hold it to scroll down (no keyup event).\n                    // listen on the document because that's where key events are triggered if no input has focus\n                    var query = \"\";\n                    var queryTimer = null;\n                    this._handleKeydownOnDropdown = function(e) {\n                        // prevent down key from scrolling the whole page,\n                        // and enter key from submitting a form etc\n                        e.preventDefault();\n                        // up and down to navigate\n                        if (e.key === \"ArrowUp\" || e.key === \"Up\" || e.key === \"ArrowDown\" || e.key === \"Down\") _this9._handleUpDownKey(e.key); else if (e.key === \"Enter\") _this9._handleEnterKey(); else if (e.key === \"Escape\") _this9._closeDropdown(); else if (/^[a-zA-ZÀ-ÿа-яА-Я ]$/.test(e.key)) {\n                            // jump to countries that start with the query string\n                            if (queryTimer) clearTimeout(queryTimer);\n                            query += e.key.toLowerCase();\n                            _this9._searchForCountry(query);\n                            // if the timer hits 1 second, reset the query\n                            queryTimer = setTimeout(function() {\n                                query = \"\";\n                            }, 1e3);\n                        }\n                    };\n                    document.addEventListener(\"keydown\", this._handleKeydownOnDropdown);\n                }\n            }, {\n                key: \"_handleUpDownKey\",\n                value: function _handleUpDownKey(key) {\n                    var next = key === \"ArrowUp\" || key === \"Up\" ? this.highlightedItem.previousElementSibling : this.highlightedItem.nextElementSibling;\n                    if (next) {\n                        // skip the divider\n                        if (next.classList.contains(\"iti__divider\")) {\n                            next = key === \"ArrowUp\" || key === \"Up\" ? next.previousElementSibling : next.nextElementSibling;\n                        }\n                        this._highlightListItem(next, true);\n                    }\n                }\n            }, {\n                key: \"_handleEnterKey\",\n                value: function _handleEnterKey() {\n                    if (this.highlightedItem) this._selectListItem(this.highlightedItem);\n                }\n            }, {\n                key: \"_searchForCountry\",\n                value: function _searchForCountry(query) {\n                    for (var i = 0; i < this.countries.length; i++) {\n                        if (this._startsWith(this.countries[i].name, query)) {\n                            var listItem = this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(this.countries[i].iso2));\n                            // update highlighting and scroll\n                            this._highlightListItem(listItem, false);\n                            this._scrollTo(listItem, true);\n                            break;\n                        }\n                    }\n                }\n            }, {\n                key: \"_startsWith\",\n                value: function _startsWith(a, b) {\n                    return a.substr(0, b.length).toLowerCase() === b;\n                }\n            }, {\n                key: \"_updateValFromNumber\",\n                value: function _updateValFromNumber(originalNumber) {\n                    var number = originalNumber;\n                    if (this.options.formatOnDisplay && window.intlTelInputUtils && this.selectedCountryData) {\n                        var useNational = !this.options.separateDialCode && (this.options.nationalMode || number.charAt(0) !== \"+\");\n                        var _intlTelInputUtils$nu = intlTelInputUtils.numberFormat, NATIONAL = _intlTelInputUtils$nu.NATIONAL, INTERNATIONAL = _intlTelInputUtils$nu.INTERNATIONAL;\n                        var format = useNational ? NATIONAL : INTERNATIONAL;\n                        number = intlTelInputUtils.formatNumber(number, this.selectedCountryData.iso2, format);\n                    }\n                    number = this._beforeSetNumber(number);\n                    this.telInput.value = number;\n                }\n            }, {\n                key: \"_updateFlagFromNumber\",\n                value: function _updateFlagFromNumber(originalNumber) {\n                    // if we're in nationalMode and we already have US/Canada selected, make sure the number starts\n                    // with a +1 so _getDialCode will be able to extract the area code\n                    // update: if we dont yet have selectedCountryData, but we're here (trying to update the flag\n                    // from the number), that means we're initialising the plugin with a number that already has a\n                    // dial code, so fine to ignore this bit\n                    var number = originalNumber;\n                    var selectedDialCode = this.selectedCountryData.dialCode;\n                    var isNanp = selectedDialCode === \"1\";\n                    if (number && this.options.nationalMode && isNanp && number.charAt(0) !== \"+\") {\n                        if (number.charAt(0) !== \"1\") number = \"1\".concat(number);\n                        number = \"+\".concat(number);\n                    }\n                    // update flag if user types area code for another country\n                    if (this.options.separateDialCode && selectedDialCode && number.charAt(0) !== \"+\") {\n                        number = \"+\".concat(selectedDialCode).concat(number);\n                    }\n                    // try and extract valid dial code from input\n                    var dialCode = this._getDialCode(number, true);\n                    var numeric = this._getNumeric(number);\n                    var countryCode = null;\n                    if (dialCode) {\n                        var countryCodes = this.countryCodes[this._getNumeric(dialCode)];\n                        // check if the right country is already selected. this should be false if the number is\n                        // longer than the matched dial code because in this case we need to make sure that if\n                        // there are multiple country matches, that the first one is selected (note: we could\n                        // just check that here, but it requires the same loop that we already have later)\n                        var alreadySelected = countryCodes.indexOf(this.selectedCountryData.iso2) !== -1 && numeric.length <= dialCode.length - 1;\n                        var isRegionlessNanpNumber = selectedDialCode === \"1\" && this._isRegionlessNanp(numeric);\n                        // only update the flag if:\n                        // A) NOT (we currently have a NANP flag selected, and the number is a regionlessNanp)\n                        // AND\n                        // B) the right country is not already selected\n                        if (!isRegionlessNanpNumber && !alreadySelected) {\n                            // if using onlyCountries option, countryCodes[0] may be empty, so we must find the first\n                            // non-empty index\n                            for (var j = 0; j < countryCodes.length; j++) {\n                                if (countryCodes[j]) {\n                                    countryCode = countryCodes[j];\n                                    break;\n                                }\n                            }\n                        }\n                    } else if (number.charAt(0) === \"+\" && numeric.length) {\n                        // invalid dial code, so empty\n                        // Note: use getNumeric here because the number has not been formatted yet, so could contain\n                        // bad chars\n                        countryCode = \"\";\n                    } else if (!number || number === \"+\") {\n                        // empty, or just a plus, so default\n                        countryCode = this.defaultCountry;\n                    }\n                    if (countryCode !== null) {\n                        return this._setFlag(countryCode);\n                    }\n                    return false;\n                }\n            }, {\n                key: \"_isRegionlessNanp\",\n                value: function _isRegionlessNanp(number) {\n                    var numeric = this._getNumeric(number);\n                    if (numeric.charAt(0) === \"1\") {\n                        var areaCode = numeric.substr(1, 3);\n                        return regionlessNanpNumbers.indexOf(areaCode) !== -1;\n                    }\n                    return false;\n                }\n            }, {\n                key: \"_highlightListItem\",\n                value: function _highlightListItem(listItem, shouldFocus) {\n                    var prevItem = this.highlightedItem;\n                    if (prevItem) prevItem.classList.remove(\"iti__highlight\");\n                    this.highlightedItem = listItem;\n                    this.highlightedItem.classList.add(\"iti__highlight\");\n                    if (shouldFocus) this.highlightedItem.focus();\n                }\n            }, {\n                key: \"_getCountryData\",\n                value: function _getCountryData(countryCode, ignoreOnlyCountriesOption, allowFail) {\n                    var countryList = ignoreOnlyCountriesOption ? allCountries : this.countries;\n                    for (var i = 0; i < countryList.length; i++) {\n                        if (countryList[i].iso2 === countryCode) {\n                            return countryList[i];\n                        }\n                    }\n                    if (allowFail) {\n                        return null;\n                    }\n                    throw new Error(\"No country data for '\".concat(countryCode, \"'\"));\n                }\n            }, {\n                key: \"_setFlag\",\n                value: function _setFlag(countryCode) {\n                    var prevCountry = this.selectedCountryData.iso2 ? this.selectedCountryData : {};\n                    // do this first as it will throw an error and stop if countryCode is invalid\n                    this.selectedCountryData = countryCode ? this._getCountryData(countryCode, false, false) : {};\n                    // update the defaultCountry - we only need the iso2 from now on, so just store that\n                    if (this.selectedCountryData.iso2) {\n                        this.defaultCountry = this.selectedCountryData.iso2;\n                    }\n                    this.selectedFlagInner.setAttribute(\"class\", \"iti__flag iti__\".concat(countryCode));\n                    // update the selected country's title attribute\n                    var title = countryCode ? \"\".concat(this.selectedCountryData.name, \": +\").concat(this.selectedCountryData.dialCode) : \"Unknown\";\n                    this.selectedFlag.setAttribute(\"title\", title);\n                    if (this.options.separateDialCode) {\n                        var dialCode = this.selectedCountryData.dialCode ? \"+\".concat(this.selectedCountryData.dialCode) : \"\";\n                        this.selectedDialCode.innerHTML = dialCode;\n                        // offsetWidth is zero if input is in a hidden container during initialisation\n                        var selectedFlagWidth = this.selectedFlag.offsetWidth || this._getHiddenSelectedFlagWidth();\n                        // add 6px of padding after the grey selected-dial-code box, as this is what we use in the css\n                        this.telInput.style.paddingLeft = \"\".concat(selectedFlagWidth + 6, \"px\");\n                    }\n                    // and the input's placeholder\n                    this._updatePlaceholder();\n                    // update the active list item\n                    if (this.options.allowDropdown) {\n                        var prevItem = this.activeItem;\n                        if (prevItem) {\n                            prevItem.classList.remove(\"iti__active\");\n                            prevItem.setAttribute(\"aria-selected\", \"false\");\n                        }\n                        if (countryCode) {\n                            // check if there is a preferred item first, else fall back to standard\n                            var nextItem = this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(countryCode, \"-preferred\")) || this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(countryCode));\n                            nextItem.setAttribute(\"aria-selected\", \"true\");\n                            nextItem.classList.add(\"iti__active\");\n                            this.activeItem = nextItem;\n                            this.selectedFlag.setAttribute(\"aria-activedescendant\", nextItem.getAttribute(\"id\"));\n                        }\n                    }\n                    // return if the flag has changed or not\n                    return prevCountry.iso2 !== countryCode;\n                }\n            }, {\n                key: \"_getHiddenSelectedFlagWidth\",\n                value: function _getHiddenSelectedFlagWidth() {\n                    // to get the right styling to apply, all we need is a shallow clone of the container,\n                    // and then to inject a deep clone of the selectedFlag element\n                    var containerClone = this.telInput.parentNode.cloneNode();\n                    containerClone.style.visibility = \"hidden\";\n                    document.body.appendChild(containerClone);\n                    var flagsContainerClone = this.flagsContainer.cloneNode();\n                    containerClone.appendChild(flagsContainerClone);\n                    var selectedFlagClone = this.selectedFlag.cloneNode(true);\n                    flagsContainerClone.appendChild(selectedFlagClone);\n                    var width = selectedFlagClone.offsetWidth;\n                    containerClone.parentNode.removeChild(containerClone);\n                    return width;\n                }\n            }, {\n                key: \"_updatePlaceholder\",\n                value: function _updatePlaceholder() {\n                    var shouldSetPlaceholder = this.options.autoPlaceholder === \"aggressive\" || !this.hadInitialPlaceholder && this.options.autoPlaceholder === \"polite\";\n                    if (window.intlTelInputUtils && shouldSetPlaceholder) {\n                        var numberType = intlTelInputUtils.numberType[this.options.placeholderNumberType];\n                        var placeholder = this.selectedCountryData.iso2 ? intlTelInputUtils.getExampleNumber(this.selectedCountryData.iso2, this.options.nationalMode, numberType) : \"\";\n                        placeholder = this._beforeSetNumber(placeholder);\n                        if (typeof this.options.customPlaceholder === \"function\") {\n                            placeholder = this.options.customPlaceholder(placeholder, this.selectedCountryData);\n                        }\n                        this.telInput.setAttribute(\"placeholder\", placeholder);\n                    }\n                }\n            }, {\n                key: \"_selectListItem\",\n                value: function _selectListItem(listItem) {\n                    // update selected flag and active list item\n                    var flagChanged = this._setFlag(listItem.getAttribute(\"data-country-code\"));\n                    this._closeDropdown();\n                    this._updateDialCode(listItem.getAttribute(\"data-dial-code\"), true);\n                    // focus the input\n                    this.telInput.focus();\n                    // put cursor at end - this fix is required for FF and IE11 (with nationalMode=false i.e. auto\n                    // inserting dial code), who try to put the cursor at the beginning the first time\n                    var len = this.telInput.value.length;\n                    this.telInput.setSelectionRange(len, len);\n                    if (flagChanged) {\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"_closeDropdown\",\n                value: function _closeDropdown() {\n                    this.countryList.classList.add(\"iti__hide\");\n                    this.selectedFlag.setAttribute(\"aria-expanded\", \"false\");\n                    // update the arrow\n                    this.dropdownArrow.classList.remove(\"iti__arrow--up\");\n                    // unbind key events\n                    document.removeEventListener(\"keydown\", this._handleKeydownOnDropdown);\n                    document.documentElement.removeEventListener(\"click\", this._handleClickOffToClose);\n                    this.countryList.removeEventListener(\"mouseover\", this._handleMouseoverCountryList);\n                    this.countryList.removeEventListener(\"click\", this._handleClickCountryList);\n                    // remove menu from container\n                    if (this.options.dropdownContainer) {\n                        if (!this.isMobile) window.removeEventListener(\"scroll\", this._handleWindowScroll);\n                        if (this.dropdown.parentNode) this.dropdown.parentNode.removeChild(this.dropdown);\n                    }\n                    this._trigger(\"close:countrydropdown\");\n                }\n            }, {\n                key: \"_scrollTo\",\n                value: function _scrollTo(element, middle) {\n                    var container = this.countryList;\n                    // windowTop from https://stackoverflow.com/a/14384091/217866\n                    var windowTop = window.pageYOffset || document.documentElement.scrollTop;\n                    var containerHeight = container.offsetHeight;\n                    var containerTop = container.getBoundingClientRect().top + windowTop;\n                    var containerBottom = containerTop + containerHeight;\n                    var elementHeight = element.offsetHeight;\n                    var elementTop = element.getBoundingClientRect().top + windowTop;\n                    var elementBottom = elementTop + elementHeight;\n                    var newScrollTop = elementTop - containerTop + container.scrollTop;\n                    var middleOffset = containerHeight / 2 - elementHeight / 2;\n                    if (elementTop < containerTop) {\n                        // scroll up\n                        if (middle) newScrollTop -= middleOffset;\n                        container.scrollTop = newScrollTop;\n                    } else if (elementBottom > containerBottom) {\n                        // scroll down\n                        if (middle) newScrollTop += middleOffset;\n                        var heightDifference = containerHeight - elementHeight;\n                        container.scrollTop = newScrollTop - heightDifference;\n                    }\n                }\n            }, {\n                key: \"_updateDialCode\",\n                value: function _updateDialCode(newDialCodeBare, hasSelectedListItem) {\n                    var inputVal = this.telInput.value;\n                    // save having to pass this every time\n                    var newDialCode = \"+\".concat(newDialCodeBare);\n                    var newNumber;\n                    if (inputVal.charAt(0) === \"+\") {\n                        // there's a plus so we're dealing with a replacement (doesn't matter if nationalMode or not)\n                        var prevDialCode = this._getDialCode(inputVal);\n                        if (prevDialCode) {\n                            // current number contains a valid dial code, so replace it\n                            newNumber = inputVal.replace(prevDialCode, newDialCode);\n                        } else {\n                            // current number contains an invalid dial code, so ditch it\n                            // (no way to determine where the invalid dial code ends and the rest of the number begins)\n                            newNumber = newDialCode;\n                        }\n                    } else if (this.options.nationalMode || this.options.separateDialCode) {\n                        // don't do anything\n                        return;\n                    } else {\n                        // nationalMode is disabled\n                        if (inputVal) {\n                            // there is an existing value with no dial code: prefix the new dial code\n                            newNumber = newDialCode + inputVal;\n                        } else if (hasSelectedListItem || !this.options.autoHideDialCode) {\n                            // no existing value and either they've just selected a list item, or autoHideDialCode is\n                            // disabled: insert new dial code\n                            newNumber = newDialCode;\n                        } else {\n                            return;\n                        }\n                    }\n                    this.telInput.value = newNumber;\n                }\n            }, {\n                key: \"_getDialCode\",\n                value: function _getDialCode(number, includeAreaCode) {\n                    var dialCode = \"\";\n                    // only interested in international numbers (starting with a plus)\n                    if (number.charAt(0) === \"+\") {\n                        var numericChars = \"\";\n                        // iterate over chars\n                        for (var i = 0; i < number.length; i++) {\n                            var c = number.charAt(i);\n                            // if char is number (https://stackoverflow.com/a/8935649/217866)\n                            if (!isNaN(parseInt(c, 10))) {\n                                numericChars += c;\n                                // if current numericChars make a valid dial code\n                                if (includeAreaCode) {\n                                    if (this.countryCodes[numericChars]) {\n                                        // store the actual raw string (useful for matching later)\n                                        dialCode = number.substr(0, i + 1);\n                                    }\n                                } else {\n                                    if (this.dialCodes[numericChars]) {\n                                        dialCode = number.substr(0, i + 1);\n                                        // if we're just looking for a dial code, we can break as soon as we find one\n                                        break;\n                                    }\n                                }\n                                // stop searching as soon as we can - in this case when we hit max len\n                                if (numericChars.length === this.countryCodeMaxLen) {\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    return dialCode;\n                }\n            }, {\n                key: \"_getFullNumber\",\n                value: function _getFullNumber() {\n                    var val = this.telInput.value.trim();\n                    var dialCode = this.selectedCountryData.dialCode;\n                    var prefix;\n                    var numericVal = this._getNumeric(val);\n                    if (this.options.separateDialCode && val.charAt(0) !== \"+\" && dialCode && numericVal) {\n                        // when using separateDialCode, it is visible so is effectively part of the typed number\n                        prefix = \"+\".concat(dialCode);\n                    } else {\n                        prefix = \"\";\n                    }\n                    return prefix + val;\n                }\n            }, {\n                key: \"_beforeSetNumber\",\n                value: function _beforeSetNumber(originalNumber) {\n                    var number = originalNumber;\n                    if (this.options.separateDialCode) {\n                        var dialCode = this._getDialCode(number);\n                        // if there is a valid dial code\n                        if (dialCode) {\n                            // in case _getDialCode returned an area code as well\n                            dialCode = \"+\".concat(this.selectedCountryData.dialCode);\n                            // a lot of numbers will have a space separating the dial code and the main number, and\n                            // some NANP numbers will have a hyphen e.g. +1 684-733-1234 - in both cases we want to get\n                            // rid of it\n                            // NOTE: don't just trim all non-numerics as may want to preserve an open parenthesis etc\n                            var start = number[dialCode.length] === \" \" || number[dialCode.length] === \"-\" ? dialCode.length + 1 : dialCode.length;\n                            number = number.substr(start);\n                        }\n                    }\n                    return this._cap(number);\n                }\n            }, {\n                key: \"_triggerCountryChange\",\n                value: function _triggerCountryChange() {\n                    this._trigger(\"countrychange\");\n                }\n            }, {\n                key: \"handleAutoCountry\",\n                value: function handleAutoCountry() {\n                    if (this.options.initialCountry === \"auto\") {\n                        // we must set this even if there is an initial val in the input: in case the initial val is\n                        // invalid and they delete it - they should see their auto country\n                        this.defaultCountry = window.intlTelInputGlobals.autoCountry;\n                        // if there's no initial value in the input, then update the flag\n                        if (!this.telInput.value) {\n                            this.setCountry(this.defaultCountry);\n                        }\n                        this.resolveAutoCountryPromise();\n                    }\n                }\n            }, {\n                key: \"handleUtils\",\n                value: function handleUtils() {\n                    // if the request was successful\n                    if (window.intlTelInputUtils) {\n                        // if there's an initial value in the input, then format it\n                        if (this.telInput.value) {\n                            this._updateValFromNumber(this.telInput.value);\n                        }\n                        this._updatePlaceholder();\n                    }\n                    this.resolveUtilsScriptPromise();\n                }\n            }, {\n                key: \"destroy\",\n                value: function destroy() {\n                    var form = this.telInput.form;\n                    if (this.options.allowDropdown) {\n                        // make sure the dropdown is closed (and unbind listeners)\n                        this._closeDropdown();\n                        this.selectedFlag.removeEventListener(\"click\", this._handleClickSelectedFlag);\n                        this.flagsContainer.removeEventListener(\"keydown\", this._handleFlagsContainerKeydown);\n                        // label click hack\n                        var label = this._getClosestLabel();\n                        if (label) label.removeEventListener(\"click\", this._handleLabelClick);\n                    }\n                    // unbind hiddenInput listeners\n                    if (this.hiddenInput && form) form.removeEventListener(\"submit\", this._handleHiddenInputSubmit);\n                    // unbind autoHideDialCode listeners\n                    if (this.options.autoHideDialCode) {\n                        if (form) form.removeEventListener(\"submit\", this._handleSubmitOrBlurEvent);\n                        this.telInput.removeEventListener(\"blur\", this._handleSubmitOrBlurEvent);\n                    }\n                    // unbind key events, and cut/paste events\n                    this.telInput.removeEventListener(\"keyup\", this._handleKeyupEvent);\n                    this.telInput.removeEventListener(\"cut\", this._handleClipboardEvent);\n                    this.telInput.removeEventListener(\"paste\", this._handleClipboardEvent);\n                    // remove attribute of id instance: data-intl-tel-input-id\n                    this.telInput.removeAttribute(\"data-intl-tel-input-id\");\n                    // remove markup (but leave the original input)\n                    var wrapper = this.telInput.parentNode;\n                    wrapper.parentNode.insertBefore(this.telInput, wrapper);\n                    wrapper.parentNode.removeChild(wrapper);\n                    delete window.intlTelInputGlobals.instances[this.id];\n                }\n            }, {\n                key: \"getExtension\",\n                value: function getExtension() {\n                    if (window.intlTelInputUtils) {\n                        return intlTelInputUtils.getExtension(this._getFullNumber(), this.selectedCountryData.iso2);\n                    }\n                    return \"\";\n                }\n            }, {\n                key: \"getNumber\",\n                value: function getNumber(format) {\n                    if (window.intlTelInputUtils) {\n                        var iso2 = this.selectedCountryData.iso2;\n                        return intlTelInputUtils.formatNumber(this._getFullNumber(), iso2, format);\n                    }\n                    return \"\";\n                }\n            }, {\n                key: \"getNumberType\",\n                value: function getNumberType() {\n                    if (window.intlTelInputUtils) {\n                        return intlTelInputUtils.getNumberType(this._getFullNumber(), this.selectedCountryData.iso2);\n                    }\n                    return -99;\n                }\n            }, {\n                key: \"getSelectedCountryData\",\n                value: function getSelectedCountryData() {\n                    return this.selectedCountryData;\n                }\n            }, {\n                key: \"getValidationError\",\n                value: function getValidationError() {\n                    if (window.intlTelInputUtils) {\n                        var iso2 = this.selectedCountryData.iso2;\n                        return intlTelInputUtils.getValidationError(this._getFullNumber(), iso2);\n                    }\n                    return -99;\n                }\n            }, {\n                key: \"isValidNumber\",\n                value: function isValidNumber() {\n                    var val = this._getFullNumber().trim();\n                    var countryCode = this.options.nationalMode ? this.selectedCountryData.iso2 : \"\";\n                    return window.intlTelInputUtils ? intlTelInputUtils.isValidNumber(val, countryCode) : null;\n                }\n            }, {\n                key: \"setCountry\",\n                value: function setCountry(originalCountryCode) {\n                    var countryCode = originalCountryCode.toLowerCase();\n                    // check if already selected\n                    if (!this.selectedFlagInner.classList.contains(\"iti__\".concat(countryCode))) {\n                        this._setFlag(countryCode);\n                        this._updateDialCode(this.selectedCountryData.dialCode, false);\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"setNumber\",\n                value: function setNumber(number) {\n                    // we must update the flag first, which updates this.selectedCountryData, which is used for\n                    // formatting the number before displaying it\n                    var flagChanged = this._updateFlagFromNumber(number);\n                    this._updateValFromNumber(number);\n                    if (flagChanged) {\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"setPlaceholderNumberType\",\n                value: function setPlaceholderNumberType(type) {\n                    this.options.placeholderNumberType = type;\n                    this._updatePlaceholder();\n                }\n            } ]);\n            return Iti;\n        }();\n        /********************\n *  STATIC METHODS\n ********************/\n        // get the country data object\n        intlTelInputGlobals.getCountryData = function() {\n            return allCountries;\n        };\n        // inject a <script> element to load utils.js\n        var injectScript = function injectScript(path, handleSuccess, handleFailure) {\n            // inject a new script element into the page\n            var script = document.createElement(\"script\");\n            script.onload = function() {\n                forEachInstance(\"handleUtils\");\n                if (handleSuccess) handleSuccess();\n            };\n            script.onerror = function() {\n                forEachInstance(\"rejectUtilsScriptPromise\");\n                if (handleFailure) handleFailure();\n            };\n            script.className = \"iti-load-utils\";\n            script.async = true;\n            script.src = path;\n            document.body.appendChild(script);\n        };\n        // load the utils script\n        intlTelInputGlobals.loadUtils = function(path) {\n            // 2 options:\n            // 1) not already started loading (start)\n            // 2) already started loading (do nothing - just wait for the onload callback to fire, which will\n            // trigger handleUtils on all instances, invoking their resolveUtilsScriptPromise functions)\n            if (!window.intlTelInputUtils && !window.intlTelInputGlobals.startedLoadingUtilsScript) {\n                // only do this once\n                window.intlTelInputGlobals.startedLoadingUtilsScript = true;\n                // if we have promises, then return a promise\n                if (typeof Promise !== \"undefined\") {\n                    return new Promise(function(resolve, reject) {\n                        return injectScript(path, resolve, reject);\n                    });\n                }\n                injectScript(path);\n            }\n            return null;\n        };\n        // default options\n        intlTelInputGlobals.defaults = defaults;\n        // version\n        intlTelInputGlobals.version = \"17.0.18\";\n        // convenience wrapper\n        return function(input, options) {\n            var iti = new Iti(input, options);\n            iti._init();\n            input.setAttribute(\"data-intl-tel-input-id\", iti.id);\n            window.intlTelInputGlobals.instances[iti.id] = iti;\n            return iti;\n        };\n    }();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/intl-tel-input/build/js/intlTelInput.js\n");

/***/ }),

/***/ "./node_modules/intl-tel-input/index.js":
/*!**********************************************!*\
  !*** ./node_modules/intl-tel-input/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Exposing intl-tel-input as a component\n */\nmodule.exports = __webpack_require__(/*! ./build/js/intlTelInput */ \"./node_modules/intl-tel-input/build/js/intlTelInput.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaW50bC10ZWwtaW5wdXQvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EsNkhBQW1EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ludGwtdGVsLWlucHV0L2luZGV4LmpzP2Y1NTAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFeHBvc2luZyBpbnRsLXRlbC1pbnB1dCBhcyBhIGNvbXBvbmVudFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL2J1aWxkL2pzL2ludGxUZWxJbnB1dFwiKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/intl-tel-input/index.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/js/filament/forms/phoneinput/index.js");
/******/ 	
/******/ })()
;